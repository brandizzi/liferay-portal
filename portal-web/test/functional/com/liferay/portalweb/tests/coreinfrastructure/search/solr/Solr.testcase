@component-name = "portal-search"
definition {

	property osgi.app.includes = "portal-search-solr7";
	property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
	property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.portal.search.elasticsearch7.api,com.liferay.portal.search.elasticsearch7.impl,com.liferay.portal.search.elasticsearch7.spi,com.liferay.portal.search.elasticsearch.monitoring.web,com.liferay.commerce.account.admin.web,com.liferay.commerce.account.api,com.liferay.commerce.account.group.admin.web,com.liferay.commerce.account.item.selector.api,com.liferay.commerce.account.item.selector.web,com.liferay.commerce.account.service,com.liferay.commerce.account.web,com.liferay.commerce.address.content.web,com.liferay.commerce.address.web,com.liferay.commerce.admin.api,com.liferay.commerce.admin.web,com.liferay.commerce.api,com.liferay.commerce.application.admin.web,com.liferay.commerce.application.api,com.liferay.commerce.application.item.selector.api,com.liferay.commerce.application.item.selector.web,com.liferay.commerce.application.list,com.liferay.commerce.application.service,com.liferay.commerce.availability.estimate.web,com.liferay.commerce.bom.admin.web,com.liferay.commerce.bom.api,com.liferay.commerce.bom.service,com.liferay.commerce.bom.web,com.liferay.commerce.cart.content.web,com.liferay.commerce.cart.taglib,com.liferay.commerce.catalog.web,com.liferay.commerce.channel.web,com.liferay.commerce.checkout.web,com.liferay.commerce.currency.api,com.liferay.commerce.currency.service,com.liferay.commerce.currency.web,com.liferay.commerce.dashboard.web,com.liferay.commerce.data.integration.api,com.liferay.commerce.data.integration.service,com.liferay.commerce.data.integration.talend.api,com.liferay.commerce.data.integration.talend,com.liferay.commerce.data.integration.web,com.liferay.commerce.discount.api,com.liferay.commerce.discount.content.web,com.liferay.commerce.discount.service,com.liferay.commerce.discount.web,com.liferay.commerce.elasticsearch7,com.liferay.commerce.frontend.api,com.liferay.commerce.frontend.impl,com.liferay.commerce.frontend.js,com.liferay.commerce.frontend.taglib,com.liferay.commerce.geocoder.bing,com.liferay.commerce.google.merchant,com.liferay.commerce.health.status.web,com.liferay.commerce.initializer.util,com.liferay.commerce.inventory.api,com.liferay.commerce.inventory.service,com.liferay.commerce.inventory.web,com.liferay.commerce.item.selector.api,com.liferay.commerce.item.selector.web,com.liferay.commerce.lang,com.liferay.commerce.machine.learning.api,com.liferay.commerce.machine.learning.forecast.alert.api,com.liferay.commerce.machine.learning.forecast.alert.lang,com.liferay.commerce.machine.learning.forecast.alert.service,com.liferay.commerce.machine.learning.forecast.alert.web,com.liferay.commerce.machine.learning.impl,com.liferay.commerce.media.api,com.liferay.commerce.media.impl,com.liferay.commerce.notification.api,com.liferay.commerce.notification.service,com.liferay.commerce.notification.web,com.liferay.commerce.order.content.web,com.liferay.commerce.order.web,com.liferay.commerce.organization.api,com.liferay.commerce.organization.web,com.liferay.commerce.payment.api,com.liferay.commerce.payment.method.authorize.net,com.liferay.commerce.payment.method.mercanet,com.liferay.commerce.payment.method.money.order,com.liferay.commerce.payment.method.paypal,com.liferay.commerce.payment.service,com.liferay.commerce.payment.web,com.liferay.commerce.price.list.api,com.liferay.commerce.price.list.service,com.liferay.commerce.price.list.web,com.liferay.commerce.pricing.api,com.liferay.commerce.pricing.service,com.liferay.commerce.pricing.web,com.liferay.commerce.product.api,com.liferay.commerce.product.asset.categories.navigation.web,com.liferay.commerce.product.asset.categories.web,com.liferay.commerce.product.content.api,com.liferay.commerce.product.content.category.web,com.liferay.commerce.product.content.search.web,com.liferay.commerce.product.content.web,com.liferay.commerce.product.ddm.api,com.liferay.commerce.product.ddm.impl,com.liferay.commerce.product.definitions.web,com.liferay.commerce.product.item.selector.api,com.liferay.commerce.product.item.selector.web,com.liferay.commerce.product.measurement.unit.web,com.liferay.commerce.product.options.web,com.liferay.commerce.product.service,com.liferay.commerce.product.subscription.type.web,com.liferay.commerce.product.taglib,com.liferay.commerce.product.tax.category.web,com.liferay.commerce.product.type.grouped.api,com.liferay.commerce.product.type.grouped.service,com.liferay.commerce.product.type.grouped.web,com.liferay.commerce.product.type.simple,com.liferay.commerce.product.type.virtual.api,com.liferay.commerce.product.type.virtual.order.api,com.liferay.commerce.product.type.virtual.order.content.web,com.liferay.commerce.product.type.virtual.order.service,com.liferay.commerce.product.type.virtual.service,com.liferay.commerce.product.type.virtual.web,com.liferay.commerce.punchout.api,com.liferay.commerce.punchout.lang,com.liferay.commerce.punchout.oauth2.provider.api,com.liferay.commerce.punchout.oauth2.provider.rest,com.liferay.commerce.punchout.portal.security.auto.login,com.liferay.commerce.punchout.service,com.liferay.commerce.punchout.web,com.liferay.commerce.service,com.liferay.commerce.shipment.content.web,com.liferay.commerce.shipment.web,com.liferay.commerce.shipping.engine.fedex,com.liferay.commerce.shipping.engine.fixed.api,com.liferay.commerce.shipping.engine.fixed.service,com.liferay.commerce.shipping.engine.fixed.web,com.liferay.commerce.shipping.origin.locator.api,com.liferay.commerce.shipping.origin.locator,com.liferay.commerce.shipping.web,com.liferay.commerce.subscription.web,com.liferay.commerce.taglib,com.liferay.commerce.talend.job.deployer.api,com.liferay.commerce.talend.job.deployer.lang,com.liferay.commerce.talend.job.deployer.salesforce,com.liferay.commerce.tax.api,com.liferay.commerce.tax.engine.fixed.api,com.liferay.commerce.tax.engine.fixed.service,com.liferay.commerce.tax.engine.fixed.web,com.liferay.commerce.tax.service,com.liferay.commerce.tax.web,com.liferay.commerce.theme.minium.api,com.liferay.commerce.theme.minium.full.site.initializer,com.liferay.commerce.theme.minium.impl,com.liferay.commerce.theme.minium.site.initializer,com.liferay.commerce.theme.speedwell.site.initializer,com.liferay.commerce.warehouse.web,com.liferay.commerce.wish.list.api,com.liferay.commerce.wish.list.service,com.liferay.commerce.wish.list.web,com.liferay.headless.commerce.admin.account.api,com.liferay.headless.commerce.admin.account.client,com.liferay.headless.commerce.admin.account.impl,com.liferay.headless.commerce.admin.catalog.api,com.liferay.headless.commerce.admin.catalog.client,com.liferay.headless.commerce.admin.catalog.impl,com.liferay.headless.commerce.admin.channel.api,com.liferay.headless.commerce.admin.channel.client,com.liferay.headless.commerce.admin.channel.impl,com.liferay.headless.commerce.admin.inventory.api,com.liferay.headless.commerce.admin.inventory.client,com.liferay.headless.commerce.admin.inventory.impl,com.liferay.headless.commerce.admin.order.api,com.liferay.headless.commerce.admin.order.client,com.liferay.headless.commerce.admin.order.impl,com.liferay.headless.commerce.admin.pricing.api,com.liferay.headless.commerce.admin.pricing.client,com.liferay.headless.commerce.admin.pricing.impl,com.liferay.headless.commerce.admin.site.setting.api,com.liferay.headless.commerce.admin.site.setting.client,com.liferay.headless.commerce.admin.site.setting.impl,com.liferay.headless.commerce.bom.api,com.liferay.headless.commerce.bom.impl,com.liferay.headless.commerce.core.api,com.liferay.headless.commerce.core.impl,com.liferay.headless.commerce.delivery.cart.api,com.liferay.headless.commerce.delivery.cart.client,com.liferay.headless.commerce.delivery.cart.impl,com.liferay.headless.commerce.delivery.catalog.api,com.liferay.headless.commerce.delivery.catalog.client,com.liferay.headless.commerce.delivery.catalog.impl,com.liferay.headless.commerce.machine.learning.api,com.liferay.headless.commerce.machine.learning.impl,com.liferay.headless.commerce.punchout.api,com.liferay.headless.commerce.punchout.impl&quot;";
	property portal.release = "true";
	property portal.suite.search.engine = "solr";
	property portal.upstream = "true";
	property solr.enabled = "true";
	property testray.main.component.name = "SOLR Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Solr Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	test AssertSearchAdmin {
		property test.name.skip.portal.instance = "Solr#AssertSearchAdmin";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.assertEngineVendorAndVersions(
			clientVersion = "7.5.0",
			engineVendor = "Solr",
			serverVersion = "7.5.0");
	}

	@priority = "4"
	test AssertSearchInsightsExplain {
		property test.name.skip.portal.instance = "Solr#AssertSearchInsightsExplain";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search");

		SearchPortlets.addWidgets(searchPortletList = "Search Insights");

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertChecked(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_STRING_QUERY",
			value1 = "debugQuery=true");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "buckets");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "explain");

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Uncheck(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		PortletEntry.save();

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_STRING_QUERY",
			value1 = "debugQuery=true");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "explain");
	}

	@priority = "3"
	test AssertSearchTuningDisabled {
		ApplicationsMenuHelper.openApplicationsMenu();

		Navigator.gotoNavTab(navTab = "Control Panel");

		AssertElementNotPresent(
			key_panel = "Search Tuning",
			locator1 = "ApplicationsMenu#PORTLET");
	}

	@description = "This smoke test is to ensure that Liferay is successfully running on a remote Solr by asserting the Solr administration dashboard and performing searches in portal. Note by default, an embedded Elasticsearch is deployed in portal."
	@priority = "4"
	test SolrSmokeTest {
		property test.name.skip.portal.instance = "Solr#SolrSmokeTest";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@description = "This smoke test is to ensure that Liferay is successfully running on a remote SolrCloud with 2 nodes by asserting console logging for ZooKeeper and performing searches in portal."
	@priority = "4"
	test SolrWithSolrCloudSmokeTest {
		property dummy.socket.proxy.disabled = "true";
		property solr.solrcloud.enabled = "true";
		property test.name.skip.portal.instance = "Solr#SolrWithSolrCloudSmokeTest";

		AssertConsoleTextPresent(value1 = "zkClient has connected");

		AssertConsoleTextPresent(value1 = "Updated live nodes from ZooKeeper");

		AssertConsoleTextPresent(value1 = "Cluster at localhost:9983 ready");

		Navigator.openSpecificURL(url = "http://localhost:8983/solr/#/~cloud");

		AssertVisible(locator1 = "SolrAdminDashboard#MENU_CLOUD");

		AssertVisible(
			key_cloudCollectionName = "liferay",
			locator1 = "SolrAdminDashboard#CLOUD_COLLECTION");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@description = "This smoke test is to ensure that Liferay is successfully running on a remote Solr with SSL Authentication by asserting console logging for KeyStoreLoaderImpl and performing searches in portal. Note by default, an embedded Elasticsearch is deployed in portal."
	@priority = "4"
	test SolrWithSSLAuthenticationSmokeTest {
		property solr.ssl.authentication.enabled = "true";
		property test.name.skip.portal.instance = "Solr#SolrWithSSLAuthenticationSmokeTest";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.gotoPage(pageName = "Solr Page");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

}