<?xml version="1.0"?>

<project basedir="." name="portal-test-solr" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="configure-app-server-ssl-jvm-arguments">
		<sequential>
			<if>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<then>
					<if>
						<os family="unix" />
						<then>
							<echo append="true" file="${app.server.tomcat.bin.dir}/setenv.sh">
CATALINA_OPTS=&quot;${CATALINA_OPTS} -Djavax.net.ssl.trustStore=${solr.dir}/server/etc/solr-ssl.keystore.jks -Djavax.net.ssl.trustStorePassword=secret&quot;</echo>
						</then>
						<elseif>
							<os family="windows" />
							<then>
								<echo append="true" file="${app.server.tomcat.bin.dir}/setenv.bat">
CATALINA_OPTS=&quot;${CATALINA_OPTS} -Djavax.net.ssl.trustStore=${solr.dir}/server/etc/solr-ssl.keystore.jks -Djavax.net.ssl.trustStorePassword=secret&quot;</echo>
							</then>
						</elseif>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="configure-liferay-solr-adapter-osgi-configs">
		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.solr7.configuration.SolrConfiguration.cfg">readURL=http://localhost:8983/solr/liferay
writeURL=http://localhost:8983/solr/liferay</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-liferay-solr-solrcloud-osgi-configs">
		<sequential>
			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.solr7.configuration.SolrConfiguration.cfg">
clientType=CLOUD</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-liferay-solr-ssl-adapter-properties">
		<sequential>
			<replace
				file="${liferay.home}/osgi/configs/com.liferay.portal.search.solr7.configuration.SolrConfiguration.cfg"
			>
				<replacetoken><![CDATA[http://]]></replacetoken>
				<replacevalue><![CDATA[https://]]></replacevalue>
			</replace>

			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.solr7.configuration.SolrConfiguration.cfg">
authenticationMode=CERT</echo>

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.solr7.configuration.SolrSSLSocketFactoryConfiguration.cfg">keyStorePath=${solr.dir}/server/etc/solr-ssl.keystore.jks
trustStorePath=${solr.dir}/server/etc/solr-ssl.keystore.jks</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-solr-ssl-properties">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<echo append="true" file="${solr.dir}/bin/solr.in.sh">${line.separator}SOLR_SSL_KEY_STORE=${solr.dir}/server/etc/solr-ssl.keystore.jks
SOLR_SSL_KEY_STORE_PASSWORD=secret
SOLR_SSL_TRUST_STORE=${solr.dir}/server/etc/solr-ssl.keystore.jks
SOLR_SSL_TRUST_STORE_PASSWORD=secret
SOLR_SSL_WANT_CLIENT_AUTH=true</echo>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<echo append="true" file="${solr.dir}/bin/solr.in.cmd">${line.separator}SOLR_SSL_KEY_STORE=${solr.dir}/server/etc/solr-ssl.keystore.jks
SOLR_SSL_KEY_STORE_PASSWORD=secret
SOLR_SSL_TRUST_STORE=${solr.dir}/server/etc/solr-ssl.keystore.jks
SOLR_SSL_TRUST_STORE_PASSWORD=secret
SOLR_SSL_WANT_CLIENT_AUTH=true</echo>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="create-solr-core">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<exec dir="${solr.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./solr create_core -c liferay -d ${solr.dir}/server/solr/liferay/conf -force" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${solr.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="solr create_core -c liferay -d ${solr.dir}/server/solr/liferay/conf" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="create-solr-ssl-keystore">
		<sequential>
			<exec dir="${solr.dir}/server/etc" executable="keytool">
				<arg value="-genkeypair" />
				<arg line="-alias solr-ssl" />
				<arg line="-dname &quot;CN=localhost, OU=Organizational Unit, O=Organization, L=Location, ST=State, C=Country&quot;" />
				<arg line="-ext SAN=DNS:localhost,IP:127.0.0.1" />
				<arg line="-keyalg RSA" />
				<arg line="-keypass secret" />
				<arg line="-keysize 2048" />
				<arg line="-keystore solr-ssl.keystore.jks" />
				<arg line="-storepass secret" />
				<arg line="-validity 9999" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="prepare-solr-configurations">
		<sequential>
			<copy
				overwrite="true"
				todir="${solr.dir}/server/solr/liferay/conf"
			>
				<fileset
					dir="${solr.dir}/server/solr/configsets/_default/conf"
				>
					<exclude name="solrconfig.xml" />
				</fileset>

				<fileset
					dir="modules/apps/portal-search-solr7/portal-search-solr7-impl/src/main/resources/META-INF/resources"
				>
					<include name="schema.xml" />
					<include name="solrconfig.xml" />
				</fileset>
			</copy>

			<echo file="${solr.dir}/server/solr/liferay/core.properties">config=solrconfig.xml
dataDir=data
name=liferay
schema=schema.xml</echo>

			<echo append="true" file="${solr.dir}/bin/solr.in.sh">SOLR_ULIMIT_CHECKS=false</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-solr-solrcloud-configurations">
		<sequential>
			<copy
				todir="${solr.dir}/server/solr/configsets/liferay_configs/conf"
			>
				<fileset
					dir="${solr.dir}/server/solr/liferay/conf"
				/>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="prepare-solr-solrcloud-example">
		<sequential>
			<copy
				todir="${solr.dir}/example/cloud/node1/solr"
			>
				<fileset
					dir="${solr.dir}/server/solr"
				>
					<include name="solr.xml" />
					<include name="zoo.cfg" />
				</fileset>
			</copy>

			<copy
				todir="${solr.dir}/example/cloud/node2/solr"
			>
				<fileset
					dir="${solr.dir}/server/solr"
				>
					<include name="solr.xml" />
					<include name="zoo.cfg" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="start-solr-solrcloud-example">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<chmod
						file="${solr.dir}/bin/solr"
						perm="a+x"
					/>

					<exec dir="${solr.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./solr start -cloud -p 8983 -s ${solr.dir}/example/cloud/node1/solr -force" />
					</exec>

					<exec dir="${solr.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./solr start -cloud -p 7574 -s ${solr.dir}/example/cloud/node2/solr -z localhost:9983 -force" />
					</exec>

					<exec dir="${solr.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./solr create_collection -c liferay -p 8983 -d liferay_configs -shards 2 -replicationFactor 2 -force" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${solr.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="solr start -cloud -p 8983 -s ${solr.dir}/example/cloud/node1/solr" />
						</exec>

						<exec dir="${solr.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="solr start -cloud -p 7574 -s ${solr.dir}/example/cloud/node2/solr -z localhost:9983" />
						</exec>

						<exec dir="${solr.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="solr create_collection -c liferay -p 8983 -d liferay_configs -shards 2 -replicationFactor 2" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="unzip-solr">
		<sequential>
			<delete dir="${solr.dir}" />

			<if>
				<not>
					<available file="${app.server.parent.dir}/${solr.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${app.server.parent.dir}/${solr.zip.name}"
						skipChecksum="true"
						src="${solr.zip.url}"
						verbose="true"
					/>
				</then>
			</if>

			<unzip
				dest="${app.server.parent.dir}"
				src="${app.server.parent.dir}/${solr.zip.name}"
			/>
		</sequential>
	</macrodef>

	<target name="deploy-solr">
		<gradle-execute dir="modules/apps/portal-search-solr7" task="deploy">
			<arg value="clean" />
		</gradle-execute>

		<echo file="${liferay.home}/osgi/configs/com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config">blacklistBundleSymbolicNames=&quot;com.liferay.portal.search.elasticsearch7.api,com.liferay.portal.search.elasticsearch7.impl,com.liferay.portal.search.elasticsearch7.spi,com.liferay.portal.search.elasticsearch.monitoring.web,com.liferay.commerce.account.admin.web,com.liferay.commerce.account.api,com.liferay.commerce.account.group.admin.web,com.liferay.commerce.account.item.selector.api,com.liferay.commerce.account.item.selector.web,com.liferay.commerce.account.service,com.liferay.commerce.account.web,com.liferay.commerce.address.content.web,com.liferay.commerce.address.web,com.liferay.commerce.admin.api,com.liferay.commerce.admin.web,com.liferay.commerce.api,com.liferay.commerce.application.admin.web,com.liferay.commerce.application.api,com.liferay.commerce.application.item.selector.api,com.liferay.commerce.application.item.selector.web,com.liferay.commerce.application.list,com.liferay.commerce.application.service,com.liferay.commerce.availability.estimate.web,com.liferay.commerce.bom.admin.web,com.liferay.commerce.bom.api,com.liferay.commerce.bom.service,com.liferay.commerce.bom.web,com.liferay.commerce.cart.content.web,com.liferay.commerce.cart.taglib,com.liferay.commerce.catalog.web,com.liferay.commerce.channel.web,com.liferay.commerce.checkout.web,com.liferay.commerce.currency.api,com.liferay.commerce.currency.service,com.liferay.commerce.currency.web,com.liferay.commerce.dashboard.web,com.liferay.commerce.data.integration.api,com.liferay.commerce.data.integration.service,com.liferay.commerce.data.integration.talend.api,com.liferay.commerce.data.integration.talend,com.liferay.commerce.data.integration.web,com.liferay.commerce.discount.api,com.liferay.commerce.discount.content.web,com.liferay.commerce.discount.service,com.liferay.commerce.discount.web,com.liferay.commerce.elasticsearch7,com.liferay.commerce.frontend.api,com.liferay.commerce.frontend.impl,com.liferay.commerce.frontend.js,com.liferay.commerce.frontend.taglib,com.liferay.commerce.geocoder.bing,com.liferay.commerce.google.merchant,com.liferay.commerce.health.status.web,com.liferay.commerce.initializer.util,com.liferay.commerce.inventory.api,com.liferay.commerce.inventory.service,com.liferay.commerce.inventory.web,com.liferay.commerce.item.selector.api,com.liferay.commerce.item.selector.web,com.liferay.commerce.lang,com.liferay.commerce.machine.learning.api,com.liferay.commerce.machine.learning.forecast.alert.api,com.liferay.commerce.machine.learning.forecast.alert.lang,com.liferay.commerce.machine.learning.forecast.alert.service,com.liferay.commerce.machine.learning.forecast.alert.web,com.liferay.commerce.machine.learning.impl,com.liferay.commerce.media.api,com.liferay.commerce.media.impl,com.liferay.commerce.notification.api,com.liferay.commerce.notification.service,com.liferay.commerce.notification.web,com.liferay.commerce.order.content.web,com.liferay.commerce.order.web,com.liferay.commerce.organization.api,com.liferay.commerce.organization.web,com.liferay.commerce.payment.api,com.liferay.commerce.payment.method.authorize.net,com.liferay.commerce.payment.method.mercanet,com.liferay.commerce.payment.method.money.order,com.liferay.commerce.payment.method.paypal,com.liferay.commerce.payment.service,com.liferay.commerce.payment.web,com.liferay.commerce.price.list.api,com.liferay.commerce.price.list.service,com.liferay.commerce.price.list.web,com.liferay.commerce.pricing.api,com.liferay.commerce.pricing.service,com.liferay.commerce.pricing.web,com.liferay.commerce.product.api,com.liferay.commerce.product.asset.categories.navigation.web,com.liferay.commerce.product.asset.categories.web,com.liferay.commerce.product.content.api,com.liferay.commerce.product.content.category.web,com.liferay.commerce.product.content.search.web,com.liferay.commerce.product.content.web,com.liferay.commerce.product.ddm.api,com.liferay.commerce.product.ddm.impl,com.liferay.commerce.product.definitions.web,com.liferay.commerce.product.item.selector.api,com.liferay.commerce.product.item.selector.web,com.liferay.commerce.product.measurement.unit.web,com.liferay.commerce.product.options.web,com.liferay.commerce.product.service,com.liferay.commerce.product.subscription.type.web,com.liferay.commerce.product.taglib,com.liferay.commerce.product.tax.category.web,com.liferay.commerce.product.type.grouped.api,com.liferay.commerce.product.type.grouped.service,com.liferay.commerce.product.type.grouped.web,com.liferay.commerce.product.type.simple,com.liferay.commerce.product.type.virtual.api,com.liferay.commerce.product.type.virtual.order.api,com.liferay.commerce.product.type.virtual.order.content.web,com.liferay.commerce.product.type.virtual.order.service,com.liferay.commerce.product.type.virtual.service,com.liferay.commerce.product.type.virtual.web,com.liferay.commerce.punchout.api,com.liferay.commerce.punchout.lang,com.liferay.commerce.punchout.oauth2.provider.api,com.liferay.commerce.punchout.oauth2.provider.rest,com.liferay.commerce.punchout.portal.security.auto.login,com.liferay.commerce.punchout.service,com.liferay.commerce.punchout.web,com.liferay.commerce.service,com.liferay.commerce.shipment.content.web,com.liferay.commerce.shipment.web,com.liferay.commerce.shipping.engine.fedex,com.liferay.commerce.shipping.engine.fixed.api,com.liferay.commerce.shipping.engine.fixed.service,com.liferay.commerce.shipping.engine.fixed.web,com.liferay.commerce.shipping.origin.locator.api,com.liferay.commerce.shipping.origin.locator,com.liferay.commerce.shipping.web,com.liferay.commerce.subscription.web,com.liferay.commerce.taglib,com.liferay.commerce.talend.job.deployer.api,com.liferay.commerce.talend.job.deployer.lang,com.liferay.commerce.talend.job.deployer.salesforce,com.liferay.commerce.tax.api,com.liferay.commerce.tax.engine.fixed.api,com.liferay.commerce.tax.engine.fixed.service,com.liferay.commerce.tax.engine.fixed.web,com.liferay.commerce.tax.service,com.liferay.commerce.tax.web,com.liferay.commerce.theme.minium.api,com.liferay.commerce.theme.minium.full.site.initializer,com.liferay.commerce.theme.minium.impl,com.liferay.commerce.theme.minium.site.initializer,com.liferay.commerce.theme.speedwell.site.initializer,com.liferay.commerce.warehouse.web,com.liferay.commerce.wish.list.api,com.liferay.commerce.wish.list.service,com.liferay.commerce.wish.list.web,com.liferay.headless.commerce.admin.account.api,com.liferay.headless.commerce.admin.account.client,com.liferay.headless.commerce.admin.account.impl,com.liferay.headless.commerce.admin.catalog.api,com.liferay.headless.commerce.admin.catalog.client,com.liferay.headless.commerce.admin.catalog.impl,com.liferay.headless.commerce.admin.channel.api,com.liferay.headless.commerce.admin.channel.client,com.liferay.headless.commerce.admin.channel.impl,com.liferay.headless.commerce.admin.inventory.api,com.liferay.headless.commerce.admin.inventory.client,com.liferay.headless.commerce.admin.inventory.impl,com.liferay.headless.commerce.admin.order.api,com.liferay.headless.commerce.admin.order.client,com.liferay.headless.commerce.admin.order.impl,com.liferay.headless.commerce.admin.pricing.api,com.liferay.headless.commerce.admin.pricing.client,com.liferay.headless.commerce.admin.pricing.impl,com.liferay.headless.commerce.admin.site.setting.api,com.liferay.headless.commerce.admin.site.setting.client,com.liferay.headless.commerce.admin.site.setting.impl,com.liferay.headless.commerce.bom.api,com.liferay.headless.commerce.bom.impl,com.liferay.headless.commerce.core.api,com.liferay.headless.commerce.core.impl,com.liferay.headless.commerce.delivery.cart.api,com.liferay.headless.commerce.delivery.cart.client,com.liferay.headless.commerce.delivery.cart.impl,com.liferay.headless.commerce.delivery.catalog.api,com.liferay.headless.commerce.delivery.catalog.client,com.liferay.headless.commerce.delivery.catalog.impl,com.liferay.headless.commerce.machine.learning.api,com.liferay.headless.commerce.machine.learning.impl,com.liferay.headless.commerce.punchout.api,com.liferay.headless.commerce.punchout.impl&quot;</echo>
	</target>

	<target name="print-solr-indices">
		<property name="solr.print.query">
			<![CDATA[
				'{
					"query": {
						"bool": {
							"must": [
								{
									"match": {
										"userName": "test test"
									}
								}
							],
							"must_not": [
								{
									"match": {
										"hidden": "true"
									}
								}
							]
						}
					}
				}'
			]]>
		</property>

		<exec executable="curl" outputproperty="curl.output.solr.indices">
			<arg line="http://localhost:8983/solr/liferay/select?q=*:*&amp;wt=json" />
			<arg value="-d" />
			<arg value="${solr.print.query}" />
		</exec>

		<echo></echo>
		<echo>##</echo>
		<echo>## Solr Indices</echo>
		<echo>##</echo>
		<echo></echo>
		<echo>${curl.output.solr.indices}</echo>
		<echo></echo>
	</target>

	<target name="set-up-solr">
		<antcall target="deploy-solr" />

		<antcall target="start-solr" />
	</target>

	<target name="start-solr">
		<lstopwatch action="start" name="start.solr" />

		<unzip-solr />

		<prepare-solr-configurations />

		<configure-liferay-solr-adapter-osgi-configs />

		<get-testcase-property property.name="solr.ssl.authentication.enabled" />

		<if>
			<equals arg1="${solr.ssl.authentication.enabled}" arg2="true" />
			<then>
				<create-solr-ssl-keystore />

				<configure-solr-ssl-properties />

				<configure-liferay-solr-ssl-adapter-properties />

				<configure-app-server-ssl-jvm-arguments />
			</then>
		</if>

		<get-testcase-property property.name="solr.solrcloud.enabled" />

		<if>
			<equals arg1="${solr.solrcloud.enabled}" arg2="true" />
			<then>
				<antcall target="start-solr-solrcloud" />
			</then>
			<else>
				<antcall target="start-solr-core" />

				<create-solr-core />
			</else>
		</if>

		<lstopwatch action="total" name="start.solr" />
	</target>

	<target name="start-solr-core">
		<lstopwatch action="start" name="start.solr.core" />

		<if>
			<os family="unix" />
			<then>
				<chmod
					file="${solr.dir}/bin/solr"
					perm="a+x"
				/>

				<exec dir="${solr.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="./solr start -V -force" />
				</exec>
			</then>
			<elseif>
				<os family="windows" />
				<then>
					<exec dir="${solr.dir}/bin" executable="cmd" spawn="true">
						<arg value="/c" />
						<arg value="solr start -V" />
					</exec>
				</then>
			</elseif>
		</if>

		<local name="solr.server.not.started" />

		<waitfor maxwait="10" maxwaitunit="second" timeoutproperty="solr.server.not.started">
			<socket port="8983" server="localhost" />
		</waitfor>

		<lstopwatch action="total" name="start.solr.core" />

		<fail if="solr.server.not.started" message="Solr server failed to initialize." />
	</target>

	<target name="start-solr-solrcloud">
		<lstopwatch action="start" name="start.solr.solrcloud" />

		<prepare-solr-solrcloud-configurations />

		<prepare-solr-solrcloud-example />

		<configure-liferay-solr-solrcloud-osgi-configs />

		<start-solr-solrcloud-example />

		<lstopwatch action="total" name="start.solr.solrcloud" />
	</target>

	<target name="stop-solr-core">
		<if>
			<os family="unix" />
			<then>
				<exec dir="${solr.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="./solr stop -all" />
				</exec>
			</then>
			<elseif>
				<os family="windows" />
				<then>
					<exec dir="${solr.dir}/bin" executable="cmd" spawn="true">
						<arg value="/c" />
						<arg value="solr stop -all" />
					</exec>
				</then>
			</elseif>
		</if>

		<local name="solr.server.running" />

		<waitfor maxwait="15" maxwaitunit="second" timeoutproperty="solr.server.running">
			<not>
				<socket port="8983" server="localhost" />
			</not>
		</waitfor>

		<fail if="solr.server.running" message="Solr server failed to stop." />
	</target>
</project>